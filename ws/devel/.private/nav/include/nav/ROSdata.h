// Generated by gencpp from file nav/ROSdata.msg
// DO NOT EDIT!


#ifndef NAV_MESSAGE_ROSDATA_H
#define NAV_MESSAGE_ROSDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nav
{
template <class ContainerAllocator>
struct ROSdata_
{
  typedef ROSdata_<ContainerAllocator> Type;

  ROSdata_()
    : yaw(0.0)
    , pitch(0.0)
    , dis(0.0)
    , is_aimed(false)
    , is_target_exists(false)  {
    }
  ROSdata_(const ContainerAllocator& _alloc)
    : yaw(0.0)
    , pitch(0.0)
    , dis(0.0)
    , is_aimed(false)
    , is_target_exists(false)  {
  (void)_alloc;
    }



   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _dis_type;
  _dis_type dis;

   typedef uint8_t _is_aimed_type;
  _is_aimed_type is_aimed;

   typedef uint8_t _is_target_exists_type;
  _is_target_exists_type is_target_exists;





  typedef boost::shared_ptr< ::nav::ROSdata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nav::ROSdata_<ContainerAllocator> const> ConstPtr;

}; // struct ROSdata_

typedef ::nav::ROSdata_<std::allocator<void> > ROSdata;

typedef boost::shared_ptr< ::nav::ROSdata > ROSdataPtr;
typedef boost::shared_ptr< ::nav::ROSdata const> ROSdataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nav::ROSdata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nav::ROSdata_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nav::ROSdata_<ContainerAllocator1> & lhs, const ::nav::ROSdata_<ContainerAllocator2> & rhs)
{
  return lhs.yaw == rhs.yaw &&
    lhs.pitch == rhs.pitch &&
    lhs.dis == rhs.dis &&
    lhs.is_aimed == rhs.is_aimed &&
    lhs.is_target_exists == rhs.is_target_exists;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nav::ROSdata_<ContainerAllocator1> & lhs, const ::nav::ROSdata_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::nav::ROSdata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nav::ROSdata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nav::ROSdata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nav::ROSdata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nav::ROSdata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nav::ROSdata_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nav::ROSdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dfeef41f7b4427e94c0ce4d2ec551822";
  }

  static const char* value(const ::nav::ROSdata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdfeef41f7b4427e9ULL;
  static const uint64_t static_value2 = 0x4c0ce4d2ec551822ULL;
};

template<class ContainerAllocator>
struct DataType< ::nav::ROSdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nav/ROSdata";
  }

  static const char* value(const ::nav::ROSdata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nav::ROSdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 yaw\n"
"float32 pitch\n"
"float32 dis\n"
"bool is_aimed\n"
"bool is_target_exists\n"
;
  }

  static const char* value(const ::nav::ROSdata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nav::ROSdata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.yaw);
      stream.next(m.pitch);
      stream.next(m.dis);
      stream.next(m.is_aimed);
      stream.next(m.is_target_exists);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ROSdata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nav::ROSdata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nav::ROSdata_<ContainerAllocator>& v)
  {
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "dis: ";
    Printer<float>::stream(s, indent + "  ", v.dis);
    s << indent << "is_aimed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_aimed);
    s << indent << "is_target_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_target_exists);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAV_MESSAGE_ROSDATA_H
